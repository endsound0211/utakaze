/*
 * This file is generated by jOOQ.
 */
package com.endsound.trpg.security.jooq.tables;


import com.endsound.trpg.security.jooq.Indexes;
import com.endsound.trpg.security.jooq.Keys;
import com.endsound.trpg.security.jooq.Utakaze;
import com.endsound.trpg.security.jooq.tables.records.MapUserGroupRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 使用者群組對應
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MapUserGroup extends TableImpl<MapUserGroupRecord> {

    private static final long serialVersionUID = -310117443;

    /**
     * The reference instance of <code>utakaze.map_user_group</code>
     */
    public static final MapUserGroup MAP_USER_GROUP = new MapUserGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MapUserGroupRecord> getRecordType() {
        return MapUserGroupRecord.class;
    }

    /**
     * The column <code>utakaze.map_user_group.user_id</code>.
     */
    public final TableField<MapUserGroupRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>utakaze.map_user_group.group_id</code>.
     */
    public final TableField<MapUserGroupRecord, Integer> GROUP_ID = createField("group_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>utakaze.map_user_group</code> table reference
     */
    public MapUserGroup() {
        this(DSL.name("map_user_group"), null);
    }

    /**
     * Create an aliased <code>utakaze.map_user_group</code> table reference
     */
    public MapUserGroup(String alias) {
        this(DSL.name(alias), MAP_USER_GROUP);
    }

    /**
     * Create an aliased <code>utakaze.map_user_group</code> table reference
     */
    public MapUserGroup(Name alias) {
        this(alias, MAP_USER_GROUP);
    }

    private MapUserGroup(Name alias, Table<MapUserGroupRecord> aliased) {
        this(alias, aliased, null);
    }

    private MapUserGroup(Name alias, Table<MapUserGroupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("使用者群組對應"));
    }

    public <O extends Record> MapUserGroup(Table<O> child, ForeignKey<O, MapUserGroupRecord> key) {
        super(child, key, MAP_USER_GROUP);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Utakaze.UTAKAZE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MAP_USER_GROUP_IDX_MAP_USER_GROUP, Indexes.MAP_USER_GROUP_IDX_MAP_USER_GROUP_0, Indexes.MAP_USER_GROUP_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MapUserGroupRecord> getPrimaryKey() {
        return Keys.KEY_MAP_USER_GROUP_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MapUserGroupRecord>> getKeys() {
        return Arrays.<UniqueKey<MapUserGroupRecord>>asList(Keys.KEY_MAP_USER_GROUP_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<MapUserGroupRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MapUserGroupRecord, ?>>asList(Keys.FK_MAP_USER_GROUP_USER, Keys.FK_MAP_USER_GROUP_GROUP);
    }

    public User user() {
        return new User(this, Keys.FK_MAP_USER_GROUP_USER);
    }

    public Group group() {
        return new Group(this, Keys.FK_MAP_USER_GROUP_GROUP);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MapUserGroup as(String alias) {
        return new MapUserGroup(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MapUserGroup as(Name alias) {
        return new MapUserGroup(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MapUserGroup rename(String name) {
        return new MapUserGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MapUserGroup rename(Name name) {
        return new MapUserGroup(name, null);
    }
}
