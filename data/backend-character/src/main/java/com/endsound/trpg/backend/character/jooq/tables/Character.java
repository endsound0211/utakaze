/*
 * This file is generated by jOOQ.
 */
package com.endsound.trpg.backend.character.jooq.tables;


import com.endsound.trpg.backend.character.jooq.Indexes;
import com.endsound.trpg.backend.character.jooq.Keys;
import com.endsound.trpg.backend.character.jooq.Utakaze;
import com.endsound.trpg.backend.character.jooq.tables.records.CharacterRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 角色
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Character extends TableImpl<CharacterRecord> {

    private static final long serialVersionUID = -336175469;

    /**
     * The reference instance of <code>utakaze.character</code>
     */
    public static final Character CHARACTER = new Character();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CharacterRecord> getRecordType() {
        return CharacterRecord.class;
    }

    /**
     * The column <code>utakaze.character.id</code>. 識別碼
     */
    public final TableField<CharacterRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "識別碼");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<CharacterRecord, Object> DATA = createField("data", org.jooq.impl.DefaultDataType.getDefaultDataType("\"utakaze\".\"character_data\"").nullable(false), this, "");

    /**
     * The column <code>utakaze.character.belong_user_id</code>.
     */
    public final TableField<CharacterRecord, Integer> BELONG_USER_ID = createField("belong_user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>utakaze.character</code> table reference
     */
    public Character() {
        this(DSL.name("character"), null);
    }

    /**
     * Create an aliased <code>utakaze.character</code> table reference
     */
    public Character(String alias) {
        this(DSL.name(alias), CHARACTER);
    }

    /**
     * Create an aliased <code>utakaze.character</code> table reference
     */
    public Character(Name alias) {
        this(alias, CHARACTER);
    }

    private Character(Name alias, Table<CharacterRecord> aliased) {
        this(alias, aliased, null);
    }

    private Character(Name alias, Table<CharacterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("角色"));
    }

    public <O extends Record> Character(Table<O> child, ForeignKey<O, CharacterRecord> key) {
        super(child, key, CHARACTER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Utakaze.UTAKAZE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CHARACTER_FK_CHARACTER_USER, Indexes.CHARACTER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CharacterRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CHARACTER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CharacterRecord> getPrimaryKey() {
        return Keys.KEY_CHARACTER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CharacterRecord>> getKeys() {
        return Arrays.<UniqueKey<CharacterRecord>>asList(Keys.KEY_CHARACTER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Character as(String alias) {
        return new Character(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Character as(Name alias) {
        return new Character(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Character rename(String name) {
        return new Character(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Character rename(Name name) {
        return new Character(name, null);
    }
}
