import org.jooq.codegen.GenerationTool
import org.jooq.meta.jaxb.Configuration
import org.jooq.meta.jaxb.Database
import org.jooq.meta.jaxb.Generate
import org.jooq.meta.jaxb.Generator
import org.jooq.meta.jaxb.Jdbc
import org.jooq.meta.jaxb.Target

buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("mysql:mysql-connector-java:+")
        classpath('org.jooq:jooq-codegen:3.11.9')
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group 'com.endsound.trpg'
version '0.0.1-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //https://mvnrepository.com/artifact/org.jooq/jooq-codegen
    implementation group: 'org.jooq', name: 'jooq-codegen', version: '3.11.9'
}

task jooqGen{
    doLast{
        println("$project.name:: Jooq Code Generate Start::")
        def jdbc = new Jdbc(
                driver: db_driver,
                url: db_url,
                user: db_username,
                password: db_password
        )

        def database = new Database(inputSchema: db_inputSchema, includes: 'user')

        def generate = new Generate(pojos: true, daos: true, deprecated: true, fluentSetters: true)

        def target = new Target(packageName: 'com.endsound.trpg.frontend.user.jooq', directory: "$projectDir/src/main/java")

        def generator = new Generator(database: database, generate: generate, target: target)
        def configuration = new Configuration(jdbc: jdbc, generator: generator)
        GenerationTool.generate(configuration)

        println("$project.name:: Jooq Code Generate Start::")
    }
}
jooqGen.group = 'gen tool'