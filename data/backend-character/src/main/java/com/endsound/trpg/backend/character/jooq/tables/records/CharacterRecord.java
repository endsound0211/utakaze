/*
 * This file is generated by jOOQ.
 */
package com.endsound.trpg.backend.character.jooq.tables.records;


import com.endsound.trpg.backend.character.jooq.tables.Character;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * 角色
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CharacterRecord extends UpdatableRecordImpl<CharacterRecord> implements Record3<Integer, Object, Integer> {

    private static final long serialVersionUID = -647449413;

    /**
     * Setter for <code>utakaze.character.id</code>. 識別碼
     */
    public CharacterRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>utakaze.character.id</code>. 識別碼
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public CharacterRecord setData(Object value) {
        set(1, value);
        return this;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public Object getData() {
        return get(1);
    }

    /**
     * Setter for <code>utakaze.character.belong_user_id</code>.
     */
    public CharacterRecord setBelongUserId(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>utakaze.character.belong_user_id</code>.
     */
    public Integer getBelongUserId() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Integer, Object, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Integer, Object, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Character.CHARACTER.ID;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public Field<Object> field2() {
        return Character.CHARACTER.DATA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return Character.CHARACTER.BELONG_USER_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getId();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public Object component2() {
        return getData();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component3() {
        return getBelongUserId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public Object value2() {
        return getData();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getBelongUserId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CharacterRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public CharacterRecord value2(Object value) {
        setData(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CharacterRecord value3(Integer value) {
        setBelongUserId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CharacterRecord values(Integer value1, Object value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CharacterRecord
     */
    public CharacterRecord() {
        super(Character.CHARACTER);
    }

    /**
     * Create a detached, initialised CharacterRecord
     */
    public CharacterRecord(Integer id, Object data, Integer belongUserId) {
        super(Character.CHARACTER);

        set(0, id);
        set(1, data);
        set(2, belongUserId);
    }
}
